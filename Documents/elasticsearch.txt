Elasticsearch Basics
Source: https://www.youtube.com/watch?v=1EnvkPf7t6Y 

•	Near real-time distributed and analytics engine
•	Requests are fulfilled with RESTful API
•	Open source developed in Java
•	All based on text documents (i.e. JSON), instead of SCHEMAS
•	Analysis: It provides aggregations which helps you to zoom out to explore trends and patterns in your data


Cluster: 
A cluster is a collection of nodes that hold the entire data. It provides centralized indexing and search capabilities across all nodes and is identified by a unique name (by default it is “elasticsearch”).


Node:
A node is a single server which is a part of a cluster, stores data and participates in the cluster’s indexing and search capabilities. 


Index:
An index is a collection of documents with similar characteristics and is identified by a name. The name is used to refer to the index while performing indexing, search, update, and delete operations.


Type:

A type is a logical category of in index. It is defined for documents that have a set of common fields. You can define more than one type in your index. 


Document:

A document is a basic unit of information which can be indexed. It is expressed in JSON.


Shards:

Elasticsearch provides the ability to subdivide the index into multiple pieces called shards. Each shard is itself a fully-functional and independent “index”.


Replicas:

Replicas are the copies of your index’s shards.


+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +


API Conventions


Multiple Indices:
•	Comma separated notations (demo1, demo2, demo3)
•	Wildcard notations (“*” matches with one or more characters in text; “+” is the same as the previous character; “_all keyword” for all indices)
•	Elasticsearch lets you search indices according to date and time:
    <static_name{date_math_expr{date_format | time_zone}}>



Elasticsearch API’s:
•	Document API’s: To perform operations on the documents
•	Search API’s: Perform search
•	Aggregation
•	Index API’s: To perform operations on the index level
•	Cluster API’s


Single Document API:
•	Index API
•	Get API
•	Update API
•	Delete API


Multi-document API:
•	Multi Get API
•	Bulk API
•	Delete by query API
•	Update by query API
•	Re-index API


PUT Example:

    PUT /my_playlist/song/6
    {
        “title”: “1000 years”,
        “artist”: “Christi Perri”,
    }

The above code Will update index “my_playlist”, type “song”, id “6” record, and put the title and artist into the document’s “source”. 


Aggregation:
	It collects all the data, which is collected by a search query.
	
Search API Example:

The following will get all records matching “firstname” of “Rowena”:

	GET _search
	{
	   “query”: {
	      “match”: {
		    “firstname”: “Rowena”
	}}}


The following will get all records with “balance” of greater or equal to 44,999, and less or equal to 9,000,000:

	GET _search
	{
	   “query”: {
	      “range”: {
		    “balance”: {
                “gte”: 44999,
                “lte”: 9000000,
	}}}}


Cluster API:
It is used to get information about cluster and its nodes, and make changes in them, such as:
•	Cluster health
•	Cluster State
•	Cluster stats
•	Pending cluster task
•	Cluster route
•	Node stats
•	Node hot_threads








